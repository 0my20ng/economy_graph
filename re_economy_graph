# ✅ 라이브러리 불러오기
import tkinter as tk
from tkinter import messagebox, ttk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Polygon

# ✅ 한글 번역
plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False

# ✅ 가격 탄력성 계산 함수
def price_elasticity(p1, p2, q1, q2):
    try:
        return abs(((q2 - q1) / ((q2 + q1) / 2)) / ((p2 - p1) / ((p2 + p1) / 2)))
    except ZeroDivisionError:
        return float('inf')

# ✅ 잉여 계산 함수
def consumer_surplus(a, b, p_eq, q_eq):
    return 0.5 * q_eq * (a - p_eq)

def producer_surplus(c, d, p_eq, q_eq):
    return 0.5 * q_eq * (p_eq - c)

def calculate_surplus_shortage(a, b, c, d, control_price):
    qd = (a - control_price) / b if b > 0 else 0
    qs = (control_price - c) / d if d > 0 else 0
    qd = max(0, qd)
    qs = max(0, qs)
    if qd > qs:
        return "초과 수요", qd - qs
    elif qs > qd:
        return "초과 공급", qs - qd
    else:
        return "균형", 0

# ✅ 비교 우위 계산 함수  
def analyze_comparative_advantage(data):
    ga, gb, ea, eb = data
    result = []

    # 절대 우위 판단
    abs_a = '갑국' if ga < ea else '을국' if ea < ga else '동일'
    abs_b = '갑국' if gb < eb else '을국' if eb < gb else '동일'

    result.append(f"✅ 절대 우위:\n - A 상품: {abs_a}\n - B 상품: {abs_b}")

    # 기회비용 계산
    cost_g_a = ga / gb  # 갑국의 A 생산 기회비용 (B 기준)
    cost_g_b = gb / ga  # 갑국의 B 생산 기회비용 (A 기준)
    cost_e_a = ea / eb  # 을국의 A 생산 기회비용 (B 기준)
    cost_e_b = eb / ea  # 을국의 B 생산 기회비용 (A 기준)

    result.append(f"\n✅ 기회비용:\n - 갑국: A={cost_g_a:.2f}B, B={cost_g_b:.2f}A\n - 을국: A={cost_e_a:.2f}B, B={cost_e_b:.2f}A")

    # 비교우위 판단
    comp_a = '갑국' if cost_g_a < cost_e_a else '을국'
    comp_b = '갑국' if cost_g_b < cost_e_b else '을국'
    result.append(f"\n✅ 비교 우위:\n - A 상품: {comp_a}\n - B 상품: {comp_b}")

    # 교환 비율 제안 (B 상품 기준)
    min_ratio = max(cost_g_a, cost_e_a)
    max_ratio = min(cost_g_b, cost_e_b)

    if min_ratio < max_ratio:
        result.append(f"\n✅ 교환 비율 제안:\n - A:B = 1:{min_ratio:.2f} ~ 1:{max_ratio:.2f} 사이")
    else:
        result.append("\n❌ 교환 비율로 서로 이득을 보기 어려움")

    return '\n'.join(result)

# ✅ 수요-공급 그래프 그리기 함수
def simulate_market(ax, dq1, dp1, dq2, dp2, sq1, sp1, sq2, sp2, tax=0, subsidy=0, price_control_type=None, price_control=None):
    ax.clear()
    if dq2 != dq1:
        demand_slope = (dp2 - dp1) / (dq2 - dq1)
        b = abs(demand_slope)
        a = dp1 + b * dq1
    else:
        b = 1
        a = dp1

    if sq2 != sq1:
        d = (sp2 - sp1) / (sq2 - sq1)
        d = abs(d)
        c = sp1 - d * sq1
    else:
        d = 1
        c = sp1

    net_tax = tax - subsidy
    denominator = b + d
    if denominator > 0:
        q_eq = (a - c) / denominator
        p_eq = a - b * q_eq
        q_new = (a - c - d * net_tax) / denominator
        p_new = a - b * q_new
    else:
        q_eq = p_eq = q_new = p_new = 0

    max_q = max(q_eq, q_new if tax != 0 or subsidy != 0 else 0, 100)
    quantities = np.linspace(0, max_q * 1.5, 500)
    demand_prices = np.maximum(a - b * quantities, 0)
    supply_prices = np.maximum(c + d * quantities, 0)
    supply_prices_new = np.maximum(c + d * quantities + net_tax, 0)

    ax.plot(quantities, demand_prices, label='수요곡선', color='blue', linewidth=2)
    ax.plot(quantities, supply_prices, label='공급곡선', color='green', linewidth=2)
    if tax != 0 or subsidy != 0:
        ax.plot(quantities, supply_prices_new, '--', label='정부개입 후 공급곡선', color='red', linewidth=2)

    if q_eq > 0 and p_eq > 0:
        ax.scatter(q_eq, p_eq, color='purple', s=100, zorder=5, label=f'원래 균형 ({q_eq:.1f}, {p_eq:.1f})')
    if (tax != 0 or subsidy != 0) and q_new > 0 and p_new > 0:
        ax.scatter(q_new, p_new, color='orange', s=100, zorder=5, label=f'개입 후 균형 ({q_new:.1f}, {p_new:.1f})')

    if q_eq > 0 and p_eq > 0:
        cs = consumer_surplus(a, b, p_eq, q_eq)
        ps = producer_surplus(c, d, p_eq, q_eq)
        ax.fill_between([0, q_eq], [p_eq, p_eq], [a, p_eq], color='skyblue', alpha=0.3, label=f'소비자 잉여: {cs:.1f}')
        ax.fill_between([0, q_eq], [c, c + d * q_eq], [p_eq, p_eq], color='lightgreen', alpha=0.3, label=f'생산자 잉여: {ps:.1f}')
        if tax != 0 or subsidy != 0:
            gov_revenue = tax * q_new if tax else -subsidy * q_new if subsidy else 0
            cs_new = consumer_surplus(a, b, p_new, q_new)
            ps_new = producer_surplus(c, d, p_new, q_new)
            total_original = cs + ps
            total_new = cs_new + ps_new + gov_revenue
            dwl = total_original - total_new
            if dwl > 0:
                ax.text(q_eq * 0.7, p_eq * 1.1, f'DWL: {dwl:.1f}', color='red', fontsize=10, weight='bold')

    if price_control_type in ['ceiling', 'floor'] and price_control is not None:
        ax.axhline(price_control, color='darkred', linestyle=':', linewidth=2,
                   label=f'{"최고가격제" if price_control_type=="ceiling" else "최저가격제"}: {price_control}')
        surplus_type, amount = calculate_surplus_shortage(a, b, c, d, price_control)
        ax.text(max_q * 0.1, price_control + 2, f'{surplus_type}: {amount:.1f}', fontsize=10, color='darkred', weight='bold')

    ax.text(0.02, 0.95, f'수요곡선: P = {a:.1f} - {b:.1f}Q', transform=ax.transAxes,
            fontsize=9, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue"))
    ax.text(0.02, 0.90, f'공급곡선: P = {c:.1f} + {d:.1f}Q', transform=ax.transAxes,
            fontsize=9, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgreen"))
    ax.set_xlabel('수량 (Q)')
    ax.set_ylabel('가격 (P)')
    ax.set_title('갑국 상품 A 시장 시뮬레이션')
    ax.legend(loc='upper right')
    ax.grid(True, alpha=0.3)
    ax.set_xlim(0, max_q * 1.2)
    ax.set_ylim(0, max(a, supply_prices.max()) * 1.1)

# ✅ 가격 탄력성 그래프 그리기 함수
def simulate_elasticity(ax, a_val, b_val):
    ax.clear()
    a = float(a_val)
    b = float(b_val)

    quantities = np.linspace(1, a / b - 1, 100)
    prices = a - b * quantities

    ax.plot(quantities, prices, label=f'수요곡선: P = {a} - {b}Q', color='red')

    for q in [quantities[20], quantities[50], quantities[80]]:
        p = a - b * q
        dq = 2
        dp = b * dq
        E = price_elasticity(p, p + dp, q, q - dq)
        ax.annotate(f"E={E:.2f}", xy=(q, p), xytext=(q, p + 5),
                    arrowprops=dict(arrowstyle="->", color='gray'), fontsize=9)

    ax.set_title('수요곡선과 가격 탄력성')
    ax.set_xlabel('수량 (Q)')
    ax.set_ylabel('가격 (P)')
    ax.legend()
    ax.grid(True)

# ✅ 비교 우위 그래프 그리기 함수
def draw_comparative_advantage(ax, data, textbox):
    ax.clear()
    ga, gb, ea, eb = data

    # 갑국과 을국의 PPF 그리기
    ax.plot([0, 1/ga], [1/gb, 0], label='갑국의 PPF', color='blue')
    ax.plot([0, 1/ea], [1/eb, 0], label='을국의 PPF', color='green')

    ax.set_xlabel('A 상품 (단위)')
    ax.set_ylabel('B 상품 (단위)')
    ax.set_title('비교우위 생산 가능곡선 (PPF)')
    ax.legend()
    ax.grid(True)

    # 해석 출력
    explanation = analyze_comparative_advantage(data)
    textbox.delete('1.0', tk.END)
    textbox.insert(tk.END, explanation)

# ✅ 지방적 입력 하나로 구분
MARKET_LABELS = ['수요 Q1', '수요 P1', '수요 Q2', '수요 P2', '공급 Q1', '공급 P1', '공급 Q2', '공급 P2', '세권', '보조금']
COMPARE_LABELS = ['갑국 A 재화량', '갑국 B 재화량', '을국 A 재화량', '을국 B 재화량']

# ✅ 메인 GUI 구현 함수
def run_gui():
    def toggle_frames():
        graph_type = graph_type_var.get()

        if graph_type == '수요·공급 곡선':
            market_frame.grid(row=1, column=0, columnspan=2, sticky='w')
            control_frame.grid(row=11, column=0, columnspan=2, sticky='w')
            compare_frame.grid_remove()
            input_frame.grid_remove()
            result_text.grid_remove()

        elif graph_type == '비교 우위':
            compare_frame.grid(row=1, column=0, columnspan=2, sticky='w')
            result_text.grid(row=2, column=0, columnspan=2, pady=10)
            market_frame.grid_remove()
            control_frame.grid_remove()
            input_frame.grid_remove()

        elif graph_type == '가격 탄력성':
            input_frame.grid(row=1, column=0, columnspan=2, sticky='w')
            market_frame.grid_remove()
            compare_frame.grid_remove()
            control_frame.grid_remove()
            result_text.grid_remove()

    def on_submit():
        try:
            graph_type = graph_type_var.get()
            ax.clear()
            if graph_type == '비교 우위':
                data = [float(compare_entries[k].get()) for k in compare_labels]
                draw_comparative_advantage(ax, data, result_text)

            elif graph_type == '가격 탄력성':
                a_val = a_entry.get()
                b_val = b_entry.get()
                simulate_elasticity(ax, a_val, b_val)

            else:
                vals = {k: float(market_entries[k].get()) for k in market_entries}
                control_type = control_type_var.get()
                control_value = float(control_price_entry.get()) if control_type != 'none' else None
                simulate_market(ax,
                    vals['수요 Q1'], vals['수요 P1'], vals['수요 Q2'], vals['수요 P2'],
                    vals['공급 Q1'], vals['공급 P1'], vals['공급 Q2'], vals['공급 P2'],
                    vals['세금'], vals['보조금'],
                    control_type if control_type != 'none' else None, control_value)
            canvas.draw()
        except Exception as e:
            messagebox.showerror("입력 오류", f"다음 오류가 발생했습니다:\n{e}")

    root = tk.Tk()
    root.title("시장 시뮬레이션 입력")
    root.geometry("1400x800")

    # ✅ 그래프 유형 선택
    tk.Label(root, text='그래프 유형 선택').grid(row=0, column=0, padx=5, pady=5, sticky='w')
    graph_type_var = tk.StringVar(value='수요·공급 곡선')
    graph_type_combo = ttk.Combobox(root, textvariable=graph_type_var, values=['수요·공급 곡선', '가격 탄력성','비교 우위'], state='readonly')
    graph_type_combo.grid(row=0, column=1, padx=5, pady=5, sticky='w')
    graph_type_combo.bind("<<ComboboxSelected>>", lambda e: toggle_frames())

    # ✅ 수요-공급 입력 창
    market_frame = tk.Frame(root)
    market_entries = {}
    market_labels = ['수요 Q1', '수요 P1', '수요 Q2', '수요 P2', '공급 Q1', '공급 P1', '공급 Q2', '공급 P2', '세금', '보조금']
    defaults = [0, 100, 50, 0, 0, 0, 50, 100, 0, 0]
    for i, label in enumerate(market_labels):
        tk.Label(market_frame, text=label).grid(row=i+1, column=0, sticky='w', padx=5, pady=2)
        entry = tk.Entry(market_frame)
        entry.insert(0, str(defaults[i]))
        entry.grid(row=i+1, column=1, padx=5, pady=2)
        market_entries[label] = entry

    # ✅ 정부개입 입력 창
    global control_type_var, control_price_entry
    control_frame = tk.Frame(root)
    tk.Label(control_frame, text='정부개입').grid(row=1, column=0, sticky='w', padx=5, pady=2)
    control_type_var = tk.StringVar(value='none')
    control_type_combo = ttk.Combobox(control_frame, textvariable=control_type_var, values=['none', 'ceiling', 'floor'], state='readonly')
    control_type_combo.grid(row=11, column=1, padx=5, pady=2)

    tk.Label(control_frame, text='가격통제').grid(row=12, column=0, sticky='w', padx=5, pady=2)
    control_price_entry = tk.Entry(control_frame)
    control_price_entry.insert(0, '0')
    control_price_entry.grid(row=12, column=1, padx=5, pady=2)

    # ✅ 가격 탄력성 입력 창
    input_frame = tk.Frame(root)
    input_frame.grid(row=0, column=0, sticky='nw', padx=10, pady=10)

    tk.Label(input_frame, text="수요곡선 P = a - bQ 에서 a 입력:").grid(row=0, column=0, sticky='w')
    a_entry = tk.Entry(input_frame)
    a_entry.insert(0, "100")
    a_entry.grid(row=0, column=1)

    tk.Label(input_frame, text="수요곡선 기울기 b 입력:").grid(row=1, column=0, sticky='w')
    b_entry = tk.Entry(input_frame)
    b_entry.insert(0, "1")
    b_entry.grid(row=1, column=1)


    # ✅ 비교 우위 입력 창
    compare_frame = tk.Frame(root)
    compare_entries = {}
    compare_labels = ['갑국 A 재화량', '갑국 B 재화량', '을국 A 재화량', '을국 B 재화량']
    for i, label in enumerate(compare_labels):
        tk.Label(compare_frame, text=label).grid(row=i+2, column=0, sticky='w', padx=5, pady=2)
        entry = tk.Entry(compare_frame)
        entry.insert(0, '10')
        entry.grid(row=i+2, column=1, padx=5, pady=2)
        compare_entries[label] = entry

     # ✅ 비교 우위 분석 결과 출력 창
    result_text = tk.Text(root, height=15, width=60)
    result_text.grid(row=6, column=0, columnspan=2, pady=10)

    tk.Button(root, text="시뮬레이션 실행", command=on_submit).grid(row=13, columnspan=2, pady=10)

    fig, ax = plt.subplots(figsize=(12, 8))
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.get_tk_widget().grid(row=0, column=2, rowspan=15, padx=10, pady=10)

    toolbar_frame = tk.Frame(root)
    toolbar_frame.grid(row=15, column=2, sticky='w')
    toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
    toolbar.update()

    on_submit()
    root.mainloop()

if __name__ == '__main__':
    run_gui()
